/*
  闭包的本质：函数在执行的时候会放到一个执行栈上，当函数执行完毕之后会从执行栈上移除，但是堆上的作用域成员因为外部引用不能释放，因此内部函数依然可以访问外部函数的成员。

  延长了外部函数内部变量的作用范围。
 */

1. 一个普通的函数function，如果它可以访问外层作用域的变量，那么这个函数就是一个闭包
  
2. 从广义的角度来说：JavaScript中的函数就是闭包

3. 从狭义的角度来说： JavaScript中一个函数如果访问了外层作用域中的变量，那么它就是一个闭包


内部函数在外界有引用，内部函数有一个作用域变量[[scope]] 包含了当前函数的AO对象和父级函数的AO对象。所以导致父级AO对象无法被垃圾回收，所以内部函数执行的时候仍然可以访问到外部函数中的变量。

虽然我们引用了 外部函数的AO对象，但是v8引擎会帮我们做优化， 优化这个AO对象，会让这个对象中我们用不到的属性删除掉。
比如
function foo () {
  const age = 18
  const arr = new Array(100000).fill(1)
  return function () {
    console.log(age);
  }
}
foo()()
// v8引擎会帮我们让foo的AO对象只留下我们内部函数中使用到的age。可以在chrom调试的closure中看到