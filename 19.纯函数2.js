/**
 * 函数组合和柯里化的关系 与 意义？
 *
 *
 * 这两者都是属于 函数式编程中重要的概念和意义
 *
 * 保证函数没有副作用，一来能保证数据的不可变性，二来能避免很多因为共享状态带来的问题。当你一个人维护代码时候可能还不明显，但随着项目的迭代，项目参与人数增加，大家对同一变量的依赖和引用越来越多，这种问题会越来越严重。最终可能连维护者自己都不清楚变量到底是在哪里被改变而产生 Bug。
 *
 * 纯函数是否是react react hooks的最大特点与好处？ 或者是与vue的区别？
 */

// map的错误用法
const list = [...];
// 修改 list 中的 type 和 age
list.map(item => {
  item.type = 1;
  item.age++;
})
// 错误的原因：最主要的输入功能没了， 变成直接修改了外部变量，这就是他的副作用，而没有副作用的写法应该是:
const list = [...];
// 修改 list 中的 type 和 age
const newList = list.map(item => ({...item, type: 1, age:item.age + 1}));

// 纯函数的概念：
// 1. 不依赖外部状态(无状态): 函数的运行结果不依赖全局变量，this指针， IO操作等。
// 2. 没有副作用(数据不变): 不修改全局变量，不修改入参。  
// 3. 相同的输入永远得到相同的输出

/**
 * 
 * 
 * 便于测试和优化：这个意义在实际项目开发中意义非常大，由于纯函数对于相同的输入永远会返回相同的结果，因此我们可以轻松断言函数的执行结果，同时也可以保证函数的优化不会影响其他代码的执行。这十分符合测试驱动开发 TDD（Test-Driven Development ) 的思想，这样产生的代码往往健壮性更强。

 * 可缓存性：因为相同的输入总是可以返回相同的输出，因此，我们可以提前缓存函数的执行结果，有很多库有所谓的 memoize 函数
 */


// 纯函数、变量作用域、闭包、高阶函数
// 柯里化、组合、管道

React要求我们无论是函数还是class声明一个组件，这个组件都必须像纯函数一样，保护它们的props不被修改。




一个优秀的框架 性能是其次，最重要的是它能带领前端的发展，给社区希望，统一规范，解决目前大多数开发遇到的问题(比如如何设计组件，代码如何设计，数据流如何设计)
